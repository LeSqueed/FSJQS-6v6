const overpy = require('./overpy/out/overpy_standalone.js');
const fs = require('node:fs');
const path = require('node:path');
const colors = require('colors');

const { version } = require('./package.json'); 

const SOURCE_DIR = path.resolve(__dirname) + path.sep + 'src' + path.sep;

const LOBBY_FILE = path.join(SOURCE_DIR, 'lobby/lobby.opy');
const MAIN_FILE = path.join(SOURCE_DIR, 'main.opy');
const OUTPUT_FILE = path.join('output/workshop.txt');
const RULES_ONLY_OUTPUT_FILE = path.join('output/rules.txt');


async function updateVersion() {
  let lobbyFileText = fs.readFileSync(LOBBY_FILE, 'utf8');
  const modeNameRegex = /("modeName":\s*"6v6 Adjustments \+ Realth\s*)[^"]*"/;
  if (modeNameRegex.test(lobbyFileText)) {
      lobbyFileText = lobbyFileText.replace(modeNameRegex, `$1${version}"`);
      fs.writeFileSync(LOBBY_FILE, lobbyFileText);
      console.log(colors.green(`Updated version in lobby.opy to ${version}`));
  } else {
      console.log(colors.yellow(`Warning: Could not find modeName to update in ${LOBBY_FILE}`));
  }
}

async function generateWorkshop() {
  try {
    if (!fs.existsSync(MAIN_FILE)) {
      throw new Error(`Main Overpy file not found: ${MAIN_FILE}`);
    }

    let mainFileText = fs.readFileSync(MAIN_FILE, 'utf8');

    console.log(colors.green(`Compiling ${MAIN_FILE}...`));
    await overpy.readyPromise;
    const compiledResult = await overpy.compile(mainFileText, "en-US", SOURCE_DIR);

    if (!compiledResult || !compiledResult.result) {
      let compileErrorMsg = "Compilation failed: No output generated by overpy.";
      if (compiledResult && compiledResult.errors && compiledResult.errors.length > 0) {
        compileErrorMsg += " Errors: " + compiledResult.errors.map(e => e.message || e).join(", ");
        console.error(colors.red("Compilation Errors:"), compiledResult.errors);
      }
      throw new Error(compileErrorMsg);
    }

    const compiledText = compiledResult.result;

    fs.writeFileSync(OUTPUT_FILE, compiledText);
    console.log(colors.green(`Workshop file generated successfully at: ${OUTPUT_FILE}`));

    console.log(colors.green('Generating rules-only file...'));
        const settingsRegex = /^settings\s*{[\s\S]*?^}\s*$/m;
        const variablesRegex = /^variables\s*{[\s\S]*?^}\s*$/m;
        const rulesOnlyText = compiledText.replace(settingsRegex, '').trim().replace(variablesRegex, '').trim();

        fs.writeFileSync(RULES_ONLY_OUTPUT_FILE, rulesOnlyText);
        console.log(colors.green(`Rules-only file generated successfully at: ${RULES_ONLY_OUTPUT_FILE}`));
  } catch (err) {
    console.error(colors.red(`Error during workshop generation for ${MAIN_FILE}:`), err);
    throw err;
  }
}

(async () => {
  try {
    await updateVersion();
    await generateWorkshop();

  } catch (err) {
    console.error(colors.red("Build script failed:"), err);
    process.exit(1);
  }
})();
