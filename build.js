const overpy = require('./overpy/out/overpy_standalone.js');
const fs = require('node:fs');
const path = require('node:path');
const colors = require('colors');


const SOURCE_DIR = path.resolve(__dirname) + path.sep;
const MAIN_FILE = path.join(SOURCE_DIR, 'main.opy');
const PACKAGE_FILE = path.join(SOURCE_DIR, 'package.json');
const LOBBY_FILE = path.join(SOURCE_DIR, 'lobby/lobby.opy');
const OUTPUT_FILE = path.join(SOURCE_DIR, 'workshop_code.txt');

async function updateVersion(newVersion) {
  if (!newVersion) return;

  // Update package.json
  const packageData = JSON.parse(fs.readFileSync(PACKAGE_FILE, 'utf8'));
  packageData.version = newVersion;
  fs.writeFileSync(PACKAGE_FILE, JSON.stringify(packageData, null, 2));
  console.log(colors.green(`Updated version in package.json to ${newVersion}`));

  // Update lobby.opy mode name
  let lobbyFileText = fs.readFileSync(LOBBY_FILE, 'utf8');
  const modeNameRegex = /"modeName": "6v6 Adjustments \+ Realth [\d\.]+"/;
  lobbyFileText = lobbyFileText.replace(modeNameRegex, `"modeName": "6v6 Adjustments + Realth ${newVersion}"`);
  fs.writeFileSync(LOBBY_FILE, lobbyFileText);
  console.log(colors.green(`Updated version in lobby.opy to ${newVersion}`));
}

async function generateWorkshop() {
  try {
    if (!fs.existsSync(MAIN_FILE)) {
      throw new Error(`Main Overpy file not found: ${MAIN_FILE}`);
    }

    let mainFileText = fs.readFileSync(MAIN_FILE, 'utf8');

    console.log(colors.green(`Compiling ${MAIN_FILE}...`));
    await overpy.readyPromise;
    const compiledResult = await overpy.compile(mainFileText, "en-US", SOURCE_DIR);

    if (!compiledResult || !compiledResult.result) {
      let compileErrorMsg = "Compilation failed: No output generated by overpy.";
      if (compiledResult && compiledResult.errors && compiledResult.errors.length > 0) {
        compileErrorMsg += " Errors: " + compiledResult.errors.map(e => e.message || e).join(", ");
        console.error(colors.red("Compilation Errors:"), compiledResult.errors);
      }
      throw new Error(compileErrorMsg);
    }

    const compiledText = compiledResult.result;

    fs.writeFileSync(OUTPUT_FILE, compiledText);
    console.log(colors.green(`Workshop file generated successfully at: ${OUTPUT_FILE}`));

  } catch (err) {
    console.error(colors.red(`Error during workshop generation for ${MAIN_FILE}:`), err);
    throw err;
  }
}

(async () => {
  try {
    const newVersion = process.argv[2]; // Get version from command-line arguments
    await updateVersion(newVersion);
    await generateWorkshop();

  } catch (err) {
    console.error(colors.red("Build script failed:"), err);
    process.exit(1);
  }
})();
